name: Build and Deploy Grocery Genie

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: black:32003
  IMAGE_NAME: grocery-genie

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test environment
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: test_user
        DB_PASSWORD: test_password
        ENV: test
        COSTCO_USERNAME: test@example.com
        COSTCO_PASSWORD: test_password
      run: |
        # Create test database tables
        python -c "
        from scripts.grocery_db import GroceryDB
        db = GroceryDB()
        db.ensure_grocery_tables()
        print('Test database initialized')
        "

    - name: Run unit tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: test_user
        DB_PASSWORD: test_password
        ENV: test
        COSTCO_USERNAME: test@example.com
        COSTCO_PASSWORD: test_password
      run: |
        # Run basic tests (excluding full scraper test)
        python -c "
        from scripts.test_costco_scraper import test_database_connection, test_receipt_parser, test_costco_scraper_init
        
        print('Running unit tests...')
        tests_passed = 0
        total_tests = 0
        
        # Test database
        total_tests += 1
        if test_database_connection():
            tests_passed += 1
        
        # Test receipt parser
        total_tests += 1
        if test_receipt_parser():
            tests_passed += 1
        
        # Test scraper init
        total_tests += 1
        if test_costco_scraper_init():
            tests_passed += 1
        
        print(f'Tests passed: {tests_passed}/{total_tests}')
        if tests_passed != total_tests:
            exit(1)
        "

    - name: Run pytest (if test files exist)
      run: |
        if [ -d "tests" ] && [ "$(ls -A tests)" ]; then
          pytest tests/ -v
        else
          echo "No pytest tests found, skipping"
        fi

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

    - name: Test Docker image
      run: |
        # Test that the image can start
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python --version
        echo "Docker image test passed"

    - name: Push to registry
      run: |
        # Note: This assumes your registry is accessible from GitHub Actions
        # You may need to add authentication steps here
        echo "Would push to registry: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "Would push to registry: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        # Uncomment when registry is configured:
        # docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        # docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to K3s
      run: |
        echo "Deployment would happen here"
        echo "This would typically involve:"
        echo "1. Updating Kubernetes manifests with new image tag"
        echo "2. Applying changes to K3s cluster"
        echo "3. Waiting for rollout to complete"
        echo "4. Running health checks"
        
        # Example deployment commands (uncomment when ready):
        # kubectl set image deployment/grocery-genie grocery-genie=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        # kubectl rollout status deployment/grocery-genie
        
        echo "Deployment simulation complete"

  notify:
    needs: [test, build, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Grocery Genie deployed successfully!"
          echo "üõí New version is now running in production"
        else
          echo "‚ùå Deployment failed or was skipped"
          echo "Check the logs for more information"
        fi
